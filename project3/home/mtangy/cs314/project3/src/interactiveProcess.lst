 line   address	contents
    1                      ; Linked by DLX-LD.
    2                      ; MemSize 20480
    3                      ; Data size: 19
    4                      ; Text size: 3072
    5                      ; Stack size: 8192
    6  00000000          	.text 0x1000
    7  00001000          	.data 0x2000
    8                      ; Compiled by GCC
   10  00002000          	.align 2
   11  00002000          	LC0_LF0:
   12  00002000  696e7465	.ascii "interactive: %c%d\n\000"
   12  00002004  72616374	
   12  00002008  6976653a	
   12  0000200c  20256325	
   12  00002010  640a00  	
   13  00002013          	.text
   14  00001000          	.align 2
   15  00001000          	.proc _main
   16  00001000          	.global _main
   17  00001000          	_main:
   18                      ;  Function 'main'; 32 bytes of locals, 0 regs to save.
   19  00001000  afbefffc	sw	-4(r29),r30; push fp
   20  00001004  001df020	add	r30,r0,r29; fp = sp
   21  00001008  afbffff8	sw	-8(r29),r31; push ret addr
   22  0000100c  2fbd0028	subui	r29,r29,#40; alloc local storage
   23  00001010  8fc20004	lw	r2,4(r30)
   24  00001014  0c000be0	jal	___main
   25  00001018  54000000	nop; not filled.
   26  0000101c  23bdfff0	addi	r29,r29,#-16
   27  00001020  8c460004	lw	r6,4(r2)
   28  00001024  afa60000	sw	(r29),r6
   29  00001028  20060000	addi	r6,r0,#0
   30  0000102c  afa60004	sw	4(r29),r6
   31  00001030  2006000a	addi	r6,r0,#10
   32  00001034  afa60008	sw	8(r29),r6
   33  00001038  0c0008d0	jal	_dstrtol
   34  0000103c  54000000	nop; not filled.
   35  00001040  00011820	add	r3,r0,r1
   36  00001044  8c420008	lw	r2,8(r2)
   37  00001048  afa20000	sw	(r29),r2
   38  0000104c  20060000	addi	r6,r0,#0
   39  00001050  afa60004	sw	4(r29),r6
   40  00001054  2006000a	addi	r6,r0,#10
   41  00001058  afa60008	sw	8(r29),r6
   42  0000105c  0c0008ac	jal	_dstrtol
   43  00001060  54000000	nop; not filled.
   44  00001064  20040000	addi	r4,r0,#0
   45  00001068  23bd0010	addi	r29,r29,#16
   46  0000106c  2405c34f	addui	r5,r0,#49999
   47  00001070  20630041	addi	r3,r3,#65
   48  00001074          	L16_LF0:
   49  00001074  20020000	addi	r2,r0,#0
   50  00001078          	L19_LF0:
   51  00001078  20420001	addi	r2,r2,#1
   52  0000107c  0045082c	sle	r1,r2,r5
   53  00001080  1420fff4	bnez	r1,L19_LF0
   54  00001084  54000000	nop; not filled.
   55  00001088  23bdfff0	addi	r29,r29,#-16
   56  0000108c  3c060000	lhi	r6,((LC0_LF0)>>16)&0xffff
   57  00001090  24c62000	addui	r6,r6,(LC0_LF0)&0xffff
   58  00001094  afa60000	sw	(r29),r6
   59  00001098  afa30004	sw	4(r29),r3
   60  0000109c  afa40008	sw	8(r29),r4
   61  000010a0  0c000070	jal	_Printf
   62  000010a4  54000000	nop; not filled.
   63  000010a8  0c000134	jal	_ProcessSleep
   64  000010ac  54000000	nop; not filled.
   65  000010b0  23bd0010	addi	r29,r29,#16
   66  000010b4  20840001	addi	r4,r4,#1
   67  000010b8  70810002	slei	r1,r4,#2
   68  000010bc  1420ffb4	bnez	r1,L16_LF0
   69  000010c0  54000000	nop; not filled.
   70  000010c4  0c000b24	jal	_exit
   71  000010c8  54000000	nop
   72  000010cc          	.endproc _main
   73                      ;;;
   74                      ;;; Stub functions for DLX traps.
   75                      ;;;
   76                      ;;; Ethan L. Miller, 1999.  Released to the public domain.
   77                      ;;;
   78                      ;;; The traps such as Open and Close
   79                      ;;; (note the capital letters) are for use by user programs.  The traps
   80                      ;;; with names such as open and close (lower case) are for use by the OS.
   81                      ;;;
   84  000010cc          	.align 2
   86                      ;;; The following are the traps to be used by user-level programs
   87                      ;;;
   89  000010cc          	.align 2
   90  000010cc          	.proc _Open
   91  000010cc          	.global _Open
   92  000010cc          	_Open:
   93                      ;;; Note that trap #0x213 actually causes a trap vector in the OS of
   94                      ;;; 0x1213.  The same is true for other user traps.  Thus, a user trap
   95                      ;;; with trap #0x240 will result in a trap vector of 0x1240 in the OS.
   96  000010cc  44000213	trap	#0x213
   97  000010d0  4be00000	jr	r31
   98  000010d4  54000000	nop
   99  000010d8          	.endproc _Open
  101  000010d8          	.proc _Close
  102  000010d8          	.global _Close
  103  000010d8          	_Close:
  104  000010d8  44000214	trap	#0x214
  105  000010dc  4be00000	jr	r31
  106  000010e0  54000000	nop
  107  000010e4          	.endproc _Close
  109  000010e4          	.proc _Read
  110  000010e4          	.global _Read
  111  000010e4          	_Read:
  112  000010e4  44000210	trap	#0x210
  113  000010e8  4be00000	jr	r31
  114  000010ec  54000000	nop
  115  000010f0          	.endproc _Read
  117  000010f0          	.proc _Write
  118  000010f0          	.global _Write
  119  000010f0          	_Write:
  120  000010f0  44000211	trap	#0x211
  121  000010f4  4be00000	jr	r31
  122  000010f8  54000000	nop
  123  000010fc          	.endproc _Write
  125  000010fc          	.proc _Lseek
  126  000010fc          	.global _Lseek
  127  000010fc          	_Lseek:
  128  000010fc  44000212	trap	#0x212
  129  00001100  4be00000	jr	r31
  130  00001104  54000000	nop
  131  00001108          	.endproc _Lseek
  133  00001108          	.proc _Putchar
  134  00001108          	.global _Putchar
  135  00001108          	_Putchar:
  136  00001108  44000280	trap	#0x280
  137  0000110c  4be00000	jr	r31
  138  00001110  54000000	nop
  139  00001114          	.endproc _Putchar
  141  00001114          	.proc _Printf
  142  00001114          	.global _Printf
  143  00001114          	_Printf:
  144  00001114  44000201	trap	#0x201
  145  00001118  4be00000	jr	r31
  146  0000111c  54000000	nop
  147  00001120          	.endproc _Printf
  149  00001120          	.proc _getpid
  150  00001120          	.global _getpid
  151  00001120          	_getpid:
  152  00001120  44000431	trap	#0x431
  153  00001124  4be00000	jr	r31
  154  00001128  54000000	nop
  155  0000112c          	.endproc _getpid
  158  0000112c          	.proc _process_create
  159  0000112c          	.global _process_create
  160  0000112c          	_process_create:
  161  0000112c  44000432	trap	#0x432
  162  00001130  4be00000	jr	r31
  163  00001134  54000000	nop
  164  00001138          	.endproc _process_create
  166  00001138          	.proc _shmget
  167  00001138          	.global _shmget
  168  00001138          	_shmget:
  169  00001138  44000440	trap	#0x440
  170  0000113c  4be00000	jr	r31
  171  00001140  54000000	nop
  172  00001144          	.endproc _shmget
  174  00001144          	.proc _shmat
  175  00001144          	.global _shmat
  176  00001144          	_shmat:
  177  00001144  44000441	trap	#0x441
  178  00001148  4be00000	jr	r31
  179  0000114c  54000000	nop
  180  00001150          	.endproc _shmat
  182  00001150          	.proc _sem_create
  183  00001150          	.global _sem_create
  184  00001150          	_sem_create:
  185  00001150  44000450	trap	#0x450
  186  00001154  4be00000	jr	r31
  187  00001158  54000000	nop
  188  0000115c          	.endproc _sem_create
  190  0000115c          	.proc _sem_wait
  191  0000115c          	.global _sem_wait
  192  0000115c          	_sem_wait:
  193  0000115c  44000451	trap	#0x451
  194  00001160  4be00000	jr	r31
  195  00001164  54000000	nop
  196  00001168          	.endproc _sem_wait
  198  00001168          	.proc _sem_signal
  199  00001168          	.global _sem_signal
  200  00001168          	_sem_signal:
  201  00001168  44000452	trap	#0x452
  202  0000116c  4be00000	jr	r31
  203  00001170  54000000	nop
  204  00001174          	.endproc _sem_signal
  206  00001174          	.proc _lock_create
  207  00001174          	.global _lock_create
  208  00001174          	_lock_create:
  209  00001174  44000453	trap	#0x453
  210  00001178  4be00000	jr	r31
  211  0000117c  54000000	nop
  212  00001180          	.endproc _lock_create
  214  00001180          	.proc _lock_acquire
  215  00001180          	.global _lock_acquire
  216  00001180          	_lock_acquire:
  217  00001180  44000454	trap	#0x454
  218  00001184  4be00000	jr	r31
  219  00001188  54000000	nop
  220  0000118c          	.endproc _lock_acquire
  222  0000118c          	.proc _lock_release
  223  0000118c          	.global _lock_release
  224  0000118c          	_lock_release:
  225  0000118c  44000455	trap	#0x455
  226  00001190  4be00000	jr	r31
  227  00001194  54000000	nop
  228  00001198          	.endproc _lock_release
  230  00001198          	.proc _cond_create
  231  00001198          	.global _cond_create
  232  00001198          	_cond_create:
  233  00001198  44000456	trap	#0x456
  234  0000119c  4be00000	jr	r31
  235  000011a0  54000000	nop
  236  000011a4          	.endproc _cond_create
  238  000011a4          	.proc _cond_wait
  239  000011a4          	.global _cond_wait
  240  000011a4          	_cond_wait:
  241  000011a4  44000457	trap	#0x457
  242  000011a8  4be00000	jr	r31
  243  000011ac  54000000	nop
  244  000011b0          	.endproc _cond_wait
  246  000011b0          	.proc _cond_signal
  247  000011b0          	.global _cond_signal
  248  000011b0          	_cond_signal:
  249  000011b0  44000458	trap	#0x458
  250  000011b4  4be00000	jr	r31
  251  000011b8  54000000	nop
  252  000011bc          	.endproc _cond_signal
  254  000011bc          	.proc _cond_broadcast
  255  000011bc          	.global _cond_broadcast
  256  000011bc          	_cond_broadcast:
  257  000011bc  44000455	trap	#0x455
  258  000011c0  4be00000	jr	r31
  259  000011c4  54000000	nop
  260  000011c8          	.endproc _cond_broadcast
  262  000011c8          	.proc _TimerGet
  263  000011c8          	.global _TimerGet
  264  000011c8          	_TimerGet:
  265  000011c8  44000050	trap	#0x50
  266  000011cc  4be00000	jr	r31
  267  000011d0  54000000	nop
  268  000011d4          	.endproc _TimerGet
  270  000011d4          	.proc _yield
  271  000011d4          	.global _yield
  272  000011d4          	_yield:
  273  000011d4  44000433	trap	#0x433
  274  000011d8  4be00000	jr	r31
  275  000011dc  54000000	nop
  276  000011e0          	.endproc _yield
  279  000011e0          	.proc _ProcessSleep
  280  000011e0          	.global _ProcessSleep
  281  000011e0          	_ProcessSleep:
  282  000011e0  44000410	trap	#0x410; This is a process sleep trap
  283  000011e4  54000000	nop
  284  000011e8  4be00000	jr	r31
  285  000011ec  54000000	nop
  286  000011f0          	.endproc _ProcessSleep
  293                      ; Compiled by GCC
  295  000011f0          	.align 2
  296  000011f0          	.proc _isspace
  297  000011f0          	.global _isspace
  298  000011f0          	_isspace:
  299                      ;  Function 'isspace'; 0 bytes of locals, 1 regs to save.
  300  000011f0  afbefffc	sw	-4(r29),r30; push fp
  301  000011f4  001df020	add	r30,r0,r29; fp = sp
  302  000011f8  afbffff8	sw	-8(r29),r31; push ret addr
  303  000011fc  2fbd0010	subui	r29,r29,#16; alloc local storage
  304  00001200  afa20000	sw	0(r29),r2
  305  00001204  83c20003	lb	r2,3(r30)
  306  00001208  201f0000	addi	r31,r0,#0
  307  0000120c  304100ff	andi	r1,r2,#0x00ff
  308  00001210  60210020	seqi	r1,r1,#32
  309  00001214  14200018	bnez	r1,L6_LF2
  310  00001218  54000000	nop; not filled.
  311  0000121c  2041fff7	addi	r1,r2,#-9
  312  00001220  302100ff	andi	r1,r1,#0x00ff
  313  00001224  70210001	sleui	r1,r1,#1
  314  00001228  10200008	beqz	r1,L5_LF2
  315  0000122c  54000000	nop; not filled.
  316  00001230          	L6_LF2:
  317  00001230  201f0001	addi	r31,r0,#1
  318  00001234          	L5_LF2:
  319  00001234  001f0820	add	r1,r0,r31
  320  00001238  8fa20000	lw	r2,0(r29)
  321  0000123c  8fdffff8	lw	r31,-8(r30)
  322  00001240  001ee820	add	r29,r0,r30
  323  00001244  8fdefffc	lw	r30,-4(r30)
  324  00001248  4be00000	jr	r31
  325  0000124c  54000000	nop
  326  00001250          	.endproc _isspace
  327  00001250          	.align 2
  328  00001250          	.proc _isxdigit
  329  00001250          	.global _isxdigit
  330  00001250          	_isxdigit:
  331                      ;  Function 'isxdigit'; 0 bytes of locals, 1 regs to save.
  332  00001250  afbefffc	sw	-4(r29),r30; push fp
  333  00001254  001df020	add	r30,r0,r29; fp = sp
  334  00001258  afbffff8	sw	-8(r29),r31; push ret addr
  335  0000125c  2fbd0010	subui	r29,r29,#16; alloc local storage
  336  00001260  afa20000	sw	0(r29),r2
  337  00001264  83df0003	lb	r31,3(r30)
  338  00001268  20020000	addi	r2,r0,#0
  339  0000126c  23e1ffd0	addi	r1,r31,#-48
  340  00001270  302100ff	andi	r1,r1,#0x00ff
  341  00001274  70210009	sleui	r1,r1,#9
  342  00001278  14200028	bnez	r1,L12_LF2
  343  0000127c  54000000	nop; not filled.
  344  00001280  23e1ff9f	addi	r1,r31,#-97
  345  00001284  302100ff	andi	r1,r1,#0x00ff
  346  00001288  70210005	sleui	r1,r1,#5
  347  0000128c  14200014	bnez	r1,L12_LF2
  348  00001290  54000000	nop; not filled.
  349  00001294  33e100ff	andi	r1,r31,#0x00ff
  350  00001298  64210041	snei	r1,r1,#65
  351  0000129c  14200008	bnez	r1,L11_LF2
  352  000012a0  54000000	nop; not filled.
  353  000012a4          	L12_LF2:
  354  000012a4  20020001	addi	r2,r0,#1
  355  000012a8          	L11_LF2:
  356  000012a8  00020820	add	r1,r0,r2
  357  000012ac  8fa20000	lw	r2,0(r29)
  358  000012b0  8fdffff8	lw	r31,-8(r30)
  359  000012b4  001ee820	add	r29,r0,r30
  360  000012b8  8fdefffc	lw	r30,-4(r30)
  361  000012bc  4be00000	jr	r31
  362  000012c0  54000000	nop
  363  000012c4          	.endproc _isxdigit
  364  000012c4          	.align 2
  365  000012c4          	.proc _dstrcpy
  366  000012c4          	.global _dstrcpy
  367  000012c4          	_dstrcpy:
  368                      ;  Function 'dstrcpy'; 0 bytes of locals, 2 regs to save.
  369  000012c4  afbefffc	sw	-4(r29),r30; push fp
  370  000012c8  001df020	add	r30,r0,r29; fp = sp
  371  000012cc  afbffff8	sw	-8(r29),r31; push ret addr
  372  000012d0  2fbd0010	subui	r29,r29,#16; alloc local storage
  373  000012d4  afa20000	sw	0(r29),r2
  374  000012d8  afa30004	sw	4(r29),r3
  375  000012dc  8fdf0000	lw	r31,(r30)
  376  000012e0  8fc20004	lw	r2,4(r30)
  377  000012e4  001f1820	add	r3,r0,r31
  378  000012e8          	L19_LF2:
  379  000012e8  80410000	lb	r1,(r2)
  380  000012ec  a3e10000	sb	(r31),r1
  381  000012f0  20420001	addi	r2,r2,#1
  382  000012f4  23ff0001	addi	r31,r31,#1
  383  000012f8  302100ff	andi	r1,r1,#0x00ff
  384  000012fc  64210000	snei	r1,r1,#0
  385  00001300  1420ffe4	bnez	r1,L19_LF2
  386  00001304  54000000	nop; not filled.
  387  00001308  00030820	add	r1,r0,r3
  388  0000130c  8fa20000	lw	r2,0(r29)
  389  00001310  8fa30004	lw	r3,4(r29)
  390  00001314  8fdffff8	lw	r31,-8(r30)
  391  00001318  001ee820	add	r29,r0,r30
  392  0000131c  8fdefffc	lw	r30,-4(r30)
  393  00001320  4be00000	jr	r31
  394  00001324  54000000	nop
  395  00001328          	.endproc _dstrcpy
  396  00001328          	.align 2
  397  00001328          	.proc _dstrncpy
  398  00001328          	.global _dstrncpy
  399  00001328          	_dstrncpy:
  400                      ;  Function 'dstrncpy'; 0 bytes of locals, 3 regs to save.
  401  00001328  afbefffc	sw	-4(r29),r30; push fp
  402  0000132c  001df020	add	r30,r0,r29; fp = sp
  403  00001330  afbffff8	sw	-8(r29),r31; push ret addr
  404  00001334  2fbd0018	subui	r29,r29,#24; alloc local storage
  405  00001338  afa20000	sw	0(r29),r2
  406  0000133c  afa30004	sw	4(r29),r3
  407  00001340  afa40008	sw	8(r29),r4
  408  00001344  8fc20000	lw	r2,(r30)
  409  00001348  8fc30004	lw	r3,4(r30)
  410  0000134c  8fdf0008	lw	r31,8(r30)
  411  00001350  00022020	add	r4,r0,r2
  412  00001354  08000024	j	L37_LF2
  413  00001358  54000000	nop; not filled.
  414  0000135c          	L34_LF2:
  415  0000135c  80610000	lb	r1,(r3)
  416  00001360  a0410000	sb	(r2),r1
  417  00001364  20630001	addi	r3,r3,#1
  418  00001368  20420001	addi	r2,r2,#1
  419  0000136c  302100ff	andi	r1,r1,#0x00ff
  420  00001370  64210000	snei	r1,r1,#0
  421  00001374  10200018	beqz	r1,L32_LF2
  422  00001378  54000000	nop; not filled.
  423  0000137c          	L37_LF2:
  424  0000137c  001f0820	add	r1,r0,r31
  425  00001380  23ffffff	addi	r31,r31,#-1
  426  00001384  70210000	slei	r1,r1,#0
  427  00001388  1020ffd0	beqz	r1,L34_LF2
  428  0000138c  54000000	nop; not filled.
  429  00001390          	L32_LF2:
  430  00001390  00040820	add	r1,r0,r4
  431  00001394  8fa20000	lw	r2,0(r29)
  432  00001398  8fa30004	lw	r3,4(r29)
  433  0000139c  8fa40008	lw	r4,8(r29)
  434  000013a0  8fdffff8	lw	r31,-8(r30)
  435  000013a4  001ee820	add	r29,r0,r30
  436  000013a8  8fdefffc	lw	r30,-4(r30)
  437  000013ac  4be00000	jr	r31
  438  000013b0  54000000	nop
  439  000013b4          	.endproc _dstrncpy
  440  000013b4          	.align 2
  441  000013b4          	.proc _dstrcat
  442  000013b4          	.global _dstrcat
  443  000013b4          	_dstrcat:
  444                      ;  Function 'dstrcat'; 0 bytes of locals, 2 regs to save.
  445  000013b4  afbefffc	sw	-4(r29),r30; push fp
  446  000013b8  001df020	add	r30,r0,r29; fp = sp
  447  000013bc  afbffff8	sw	-8(r29),r31; push ret addr
  448  000013c0  2fbd0010	subui	r29,r29,#16; alloc local storage
  449  000013c4  afa20000	sw	0(r29),r2
  450  000013c8  afa30004	sw	4(r29),r3
  451  000013cc  8fdf0000	lw	r31,(r30)
  452  000013d0  001f1820	add	r3,r0,r31
  453  000013d4  90610000	lbu	r1,(r3)
  454  000013d8  64210000	snei	r1,r1,#0
  455  000013dc  10200018	beqz	r1,L50_LF2
  456  000013e0  54000000	nop; not filled.
  457  000013e4          	L51_LF2:
  458  000013e4  23ff0001	addi	r31,r31,#1
  459  000013e8  93e10000	lbu	r1,(r31)
  460  000013ec  64210000	snei	r1,r1,#0
  461  000013f0  1420fff0	bnez	r1,L51_LF2
  462  000013f4  54000000	nop; not filled.
  463  000013f8          	L50_LF2:
  464  000013f8  001f1020	add	r2,r0,r31
  465  000013fc  8fdf0004	lw	r31,4(r30)
  466  00001400          	L54_LF2:
  467  00001400  83e10000	lb	r1,(r31)
  468  00001404  a0410000	sb	(r2),r1
  469  00001408  23ff0001	addi	r31,r31,#1
  470  0000140c  20420001	addi	r2,r2,#1
  471  00001410  302100ff	andi	r1,r1,#0x00ff
  472  00001414  64210000	snei	r1,r1,#0
  473  00001418  1420ffe4	bnez	r1,L54_LF2
  474  0000141c  54000000	nop; not filled.
  475  00001420  00030820	add	r1,r0,r3
  476  00001424  8fa20000	lw	r2,0(r29)
  477  00001428  8fa30004	lw	r3,4(r29)
  478  0000142c  8fdffff8	lw	r31,-8(r30)
  479  00001430  001ee820	add	r29,r0,r30
  480  00001434  8fdefffc	lw	r30,-4(r30)
  481  00001438  4be00000	jr	r31
  482  0000143c  54000000	nop
  483  00001440          	.endproc _dstrcat
  484  00001440          	.align 2
  485  00001440          	.proc _dstrncmp
  486  00001440          	.global _dstrncmp
  487  00001440          	_dstrncmp:
  488                      ;  Function 'dstrncmp'; 0 bytes of locals, 4 regs to save.
  489  00001440  afbefffc	sw	-4(r29),r30; push fp
  490  00001444  001df020	add	r30,r0,r29; fp = sp
  491  00001448  afbffff8	sw	-8(r29),r31; push ret addr
  492  0000144c  2fbd0018	subui	r29,r29,#24; alloc local storage
  493  00001450  afa20000	sw	0(r29),r2
  494  00001454  afa30004	sw	4(r29),r3
  495  00001458  afa40008	sw	8(r29),r4
  496  0000145c  afa5000c	sw	12(r29),r5
  497  00001460  8fc30000	lw	r3,(r30)
  498  00001464  8fc40004	lw	r4,4(r30)
  499  00001468  8fc50008	lw	r5,8(r30)
  500  0000146c  20020000	addi	r2,r0,#0
  501  00001470  0045082a	slt	r1,r2,r5
  502  00001474  1020003c	beqz	r1,L73_LF2
  503  00001478  54000000	nop; not filled.
  504  0000147c          	L75_LF2:
  505  0000147c  909f0000	lbu	r31,(r4)
  506  00001480  67e10000	snei	r1,r31,#0
  507  00001484  10200038	beqz	r1,L86_LF2
  508  00001488  54000000	nop; not filled.
  509  0000148c  90610000	lbu	r1,(r3)
  510  00001490  003f0829	sne	r1,r1,r31
  511  00001494  1420001c	bnez	r1,L73_LF2
  512  00001498  54000000	nop; not filled.
  513  0000149c  20630001	addi	r3,r3,#1
  514  000014a0  20840001	addi	r4,r4,#1
  515  000014a4  20420001	addi	r2,r2,#1
  516  000014a8  0045082a	slt	r1,r2,r5
  517  000014ac  1420ffcc	bnez	r1,L75_LF2
  518  000014b0  54000000	nop; not filled.
  519  000014b4          	L73_LF2:
  520  000014b4  00450828	seq	r1,r2,r5
  521  000014b8  10200010	beqz	r1,L80_LF2
  522  000014bc  54000000	nop; not filled.
  523  000014c0          	L86_LF2:
  524  000014c0  20010000	addi	r1,r0,#0
  525  000014c4  08000028	j	L84_LF2
  526  000014c8  54000000	nop; not filled.
  527  000014cc          	L80_LF2:
  528  000014cc  907f0000	lbu	r31,(r3)
  529  000014d0  90830000	lbu	r3,(r4)
  530  000014d4  03e30822	sub	r1,r31,r3
  531  000014d8  74210000	sgei	r1,r1,#0
  532  000014dc  2002ffff	addi	r2,r0,#-1
  533  000014e0  10200008	beqz	r1,L82_LF2
  534  000014e4  54000000	nop; not filled.
  535  000014e8  03e31029	sne	r2,r31,r3
  536  000014ec          	L82_LF2:
  537  000014ec  00020820	add	r1,r0,r2
  538  000014f0          	L84_LF2:
  539  000014f0  8fa20000	lw	r2,0(r29)
  540  000014f4  8fa30004	lw	r3,4(r29)
  541  000014f8  8fa40008	lw	r4,8(r29)
  542  000014fc  8fa5000c	lw	r5,12(r29)
  543  00001500  8fdffff8	lw	r31,-8(r30)
  544  00001504  001ee820	add	r29,r0,r30
  545  00001508  8fdefffc	lw	r30,-4(r30)
  546  0000150c  4be00000	jr	r31
  547  00001510  54000000	nop
  548  00001514          	.endproc _dstrncmp
  549  00001514          	.align 2
  550  00001514          	.proc _dstrlen
  551  00001514          	.global _dstrlen
  552  00001514          	_dstrlen:
  553                      ;  Function 'dstrlen'; 0 bytes of locals, 1 regs to save.
  554  00001514  afbefffc	sw	-4(r29),r30; push fp
  555  00001518  001df020	add	r30,r0,r29; fp = sp
  556  0000151c  afbffff8	sw	-8(r29),r31; push ret addr
  557  00001520  2fbd0010	subui	r29,r29,#16; alloc local storage
  558  00001524  afa20000	sw	0(r29),r2
  559  00001528  8fdf0000	lw	r31,(r30)
  560  0000152c  20020000	addi	r2,r0,#0
  561  00001530  08000008	j	L97_LF2
  562  00001534  54000000	nop; not filled.
  563  00001538          	L95_LF2:
  564  00001538  20420001	addi	r2,r2,#1
  565  0000153c          	L97_LF2:
  566  0000153c  93e10000	lbu	r1,(r31)
  567  00001540  23ff0001	addi	r31,r31,#1
  568  00001544  64210000	snei	r1,r1,#0
  569  00001548  1420ffec	bnez	r1,L95_LF2
  570  0000154c  54000000	nop; not filled.
  571  00001550  00020820	add	r1,r0,r2
  572  00001554  8fa20000	lw	r2,0(r29)
  573  00001558  8fdffff8	lw	r31,-8(r30)
  574  0000155c  001ee820	add	r29,r0,r30
  575  00001560  8fdefffc	lw	r30,-4(r30)
  576  00001564  4be00000	jr	r31
  577  00001568  54000000	nop
  578  0000156c          	.endproc _dstrlen
  579  0000156c          	.align 2
  580  0000156c          	.proc _dstrstr
  581  0000156c          	.global _dstrstr
  582  0000156c          	_dstrstr:
  583                      ;  Function 'dstrstr'; 0 bytes of locals, 6 regs to save.
  584  0000156c  afbefffc	sw	-4(r29),r30; push fp
  585  00001570  001df020	add	r30,r0,r29; fp = sp
  586  00001574  afbffff8	sw	-8(r29),r31; push ret addr
  587  00001578  2fbd0020	subui	r29,r29,#32; alloc local storage
  588  0000157c  afa20000	sw	0(r29),r2
  589  00001580  afa30004	sw	4(r29),r3
  590  00001584  afa40008	sw	8(r29),r4
  591  00001588  afa5000c	sw	12(r29),r5
  592  0000158c  afa60010	sw	16(r29),r6
  593  00001590  afa70014	sw	20(r29),r7
  594  00001594  8fc50000	lw	r5,(r30)
  595  00001598  8fc70004	lw	r7,4(r30)
  596  0000159c  20030000	addi	r3,r0,#0
  597  000015a0  90e10000	lbu	r1,(r7)
  598  000015a4  20e20001	addi	r2,r7,#1
  599  000015a8  64210000	snei	r1,r1,#0
  600  000015ac  1020001c	beqz	r1,L125_LF2
  601  000015b0  54000000	nop; not filled.
  602  000015b4          	L126_LF2:
  603  000015b4  20630001	addi	r3,r3,#1
  604  000015b8  90410000	lbu	r1,(r2)
  605  000015bc  20420001	addi	r2,r2,#1
  606  000015c0  64210000	snei	r1,r1,#0
  607  000015c4  1420ffec	bnez	r1,L126_LF2
  608  000015c8  54000000	nop; not filled.
  609  000015cc          	L125_LF2:
  610  000015cc  00033020	add	r6,r0,r3
  611  000015d0  080000ac	j	L149_LF2
  612  000015d4  54000000	nop; not filled.
  613  000015d8          	L130_LF2:
  614  000015d8  00051820	add	r3,r0,r5
  615  000015dc  00072020	add	r4,r0,r7
  616  000015e0  20020000	addi	r2,r0,#0
  617  000015e4  0046082a	slt	r1,r2,r6
  618  000015e8  1020003c	beqz	r1,L134_LF2
  619  000015ec  54000000	nop; not filled.
  620  000015f0          	L136_LF2:
  621  000015f0  909f0000	lbu	r31,(r4)
  622  000015f4  67e10000	snei	r1,r31,#0
  623  000015f8  10200038	beqz	r1,L150_LF2
  624  000015fc  54000000	nop; not filled.
  625  00001600  90610000	lbu	r1,(r3)
  626  00001604  003f0829	sne	r1,r1,r31
  627  00001608  1420001c	bnez	r1,L134_LF2
  628  0000160c  54000000	nop; not filled.
  629  00001610  20630001	addi	r3,r3,#1
  630  00001614  20840001	addi	r4,r4,#1
  631  00001618  20420001	addi	r2,r2,#1
  632  0000161c  0046082a	slt	r1,r2,r6
  633  00001620  1420ffcc	bnez	r1,L136_LF2
  634  00001624  54000000	nop; not filled.
  635  00001628          	L134_LF2:
  636  00001628  00460828	seq	r1,r2,r6
  637  0000162c  10200010	beqz	r1,L141_LF2
  638  00001630  54000000	nop; not filled.
  639  00001634          	L150_LF2:
  640  00001634  20010000	addi	r1,r0,#0
  641  00001638  08000028	j	L132_LF2
  642  0000163c  54000000	nop; not filled.
  643  00001640          	L141_LF2:
  644  00001640  90630000	lbu	r3,(r3)
  645  00001644  90820000	lbu	r2,(r4)
  646  00001648  00620822	sub	r1,r3,r2
  647  0000164c  74210000	sgei	r1,r1,#0
  648  00001650  201fffff	addi	r31,r0,#-1
  649  00001654  10200008	beqz	r1,L143_LF2
  650  00001658  54000000	nop; not filled.
  651  0000165c  0062f829	sne	r31,r3,r2
  652  00001660          	L143_LF2:
  653  00001660  001f0820	add	r1,r0,r31
  654  00001664          	L132_LF2:
  655  00001664  64210000	snei	r1,r1,#0
  656  00001668  14200010	bnez	r1,L131_LF2
  657  0000166c  54000000	nop; not filled.
  658  00001670  00050820	add	r1,r0,r5
  659  00001674  0800001c	j	L146_LF2
  660  00001678  54000000	nop; not filled.
  661  0000167c          	L131_LF2:
  662  0000167c  20a50001	addi	r5,r5,#1
  663  00001680          	L149_LF2:
  664  00001680  90a10000	lbu	r1,(r5)
  665  00001684  64210000	snei	r1,r1,#0
  666  00001688  1420ff4c	bnez	r1,L130_LF2
  667  0000168c  54000000	nop; not filled.
  668  00001690  20010000	addi	r1,r0,#0
  669  00001694          	L146_LF2:
  670  00001694  8fa20000	lw	r2,0(r29)
  671  00001698  8fa30004	lw	r3,4(r29)
  672  0000169c  8fa40008	lw	r4,8(r29)
  673  000016a0  8fa5000c	lw	r5,12(r29)
  674  000016a4  8fa60010	lw	r6,16(r29)
  675  000016a8  8fa70014	lw	r7,20(r29)
  676  000016ac  8fdffff8	lw	r31,-8(r30)
  677  000016b0  001ee820	add	r29,r0,r30
  678  000016b4  8fdefffc	lw	r30,-4(r30)
  679  000016b8  4be00000	jr	r31
  680  000016bc  54000000	nop
  681  000016c0          	.endproc _dstrstr
  682  000016c0          	.align 2
  683  000016c0          	.proc _dmindex
  684  000016c0          	.global _dmindex
  685  000016c0          	_dmindex:
  686                      ;  Function 'dmindex'; 0 bytes of locals, 5 regs to save.
  687  000016c0  afbefffc	sw	-4(r29),r30; push fp
  688  000016c4  001df020	add	r30,r0,r29; fp = sp
  689  000016c8  afbffff8	sw	-8(r29),r31; push ret addr
  690  000016cc  2fbd0020	subui	r29,r29,#32; alloc local storage
  691  000016d0  afa20000	sw	0(r29),r2
  692  000016d4  afa30004	sw	4(r29),r3
  693  000016d8  afa40008	sw	8(r29),r4
  694  000016dc  afa5000c	sw	12(r29),r5
  695  000016e0  afa60010	sw	16(r29),r6
  696  000016e4  8fc40000	lw	r4,(r30)
  697  000016e8  8fc60004	lw	r6,4(r30)
  698  000016ec  90810000	lbu	r1,(r4)
  699  000016f0  64210000	snei	r1,r1,#0
  700  000016f4  10200060	beqz	r1,L164_LF2
  701  000016f8  54000000	nop; not filled.
  702  000016fc  00012820	add	r5,r0,r1
  703  00001700          	L165_LF2:
  704  00001700  00061020	add	r2,r0,r6
  705  00001704  80df0000	lb	r31,(r6)
  706  00001708  33e100ff	andi	r1,r31,#0x00ff
  707  0000170c  64210000	snei	r1,r1,#0
  708  00001710  1020003c	beqz	r1,L163_LF2
  709  00001714  54000000	nop; not filled.
  710  00001718  90830000	lbu	r3,(r4)
  711  0000171c          	L169_LF2:
  712  0000171c  33e100ff	andi	r1,r31,#0x00ff
  713  00001720  00610828	seq	r1,r3,r1
  714  00001724  10200010	beqz	r1,L168_LF2
  715  00001728  54000000	nop; not filled.
  716  0000172c  00040820	add	r1,r0,r4
  717  00001730  08000028	j	L173_LF2
  718  00001734  54000000	nop; not filled.
  719  00001738          	L168_LF2:
  720  00001738  20420001	addi	r2,r2,#1
  721  0000173c  805f0000	lb	r31,(r2)
  722  00001740  33e100ff	andi	r1,r31,#0x00ff
  723  00001744  64210000	snei	r1,r1,#0
  724  00001748  1420ffd0	bnez	r1,L169_LF2
  725  0000174c  54000000	nop; not filled.
  726  00001750          	L163_LF2:
  727  00001750  14a0ffac	bnez	r5,L165_LF2
  728  00001754  54000000	nop; not filled.
  729  00001758          	L164_LF2:
  730  00001758  20010000	addi	r1,r0,#0
  731  0000175c          	L173_LF2:
  732  0000175c  8fa20000	lw	r2,0(r29)
  733  00001760  8fa30004	lw	r3,4(r29)
  734  00001764  8fa40008	lw	r4,8(r29)
  735  00001768  8fa5000c	lw	r5,12(r29)
  736  0000176c  8fa60010	lw	r6,16(r29)
  737  00001770  8fdffff8	lw	r31,-8(r30)
  738  00001774  001ee820	add	r29,r0,r30
  739  00001778  8fdefffc	lw	r30,-4(r30)
  740  0000177c  4be00000	jr	r31
  741  00001780  54000000	nop
  742  00001784          	.endproc _dmindex
  743  00001784          	.align 2
  744  00001784          	.proc _dindex
  745  00001784          	.global _dindex
  746  00001784          	_dindex:
  747                      ;  Function 'dindex'; 0 bytes of locals, 2 regs to save.
  748  00001784  afbefffc	sw	-4(r29),r30; push fp
  749  00001788  001df020	add	r30,r0,r29; fp = sp
  750  0000178c  afbffff8	sw	-8(r29),r31; push ret addr
  751  00001790  2fbd0010	subui	r29,r29,#16; alloc local storage
  752  00001794  afa20000	sw	0(r29),r2
  753  00001798  afa30004	sw	4(r29),r3
  754  0000179c  8fc20000	lw	r2,(r30)
  755  000017a0  8fc30004	lw	r3,4(r30)
  756  000017a4  08000024	j	L187_LF2
  757  000017a8  54000000	nop; not filled.
  758  000017ac          	L183_LF2:
  759  000017ac  33e100ff	andi	r1,r31,#0x00ff
  760  000017b0  00230828	seq	r1,r1,r3
  761  000017b4  10200010	beqz	r1,L184_LF2
  762  000017b8  54000000	nop; not filled.
  763  000017bc  00020820	add	r1,r0,r2
  764  000017c0  08000020	j	L186_LF2
  765  000017c4  54000000	nop; not filled.
  766  000017c8          	L184_LF2:
  767  000017c8  20420001	addi	r2,r2,#1
  768  000017cc          	L187_LF2:
  769  000017cc  805f0000	lb	r31,(r2)
  770  000017d0  33e100ff	andi	r1,r31,#0x00ff
  771  000017d4  64210000	snei	r1,r1,#0
  772  000017d8  1420ffd0	bnez	r1,L183_LF2
  773  000017dc  54000000	nop; not filled.
  774  000017e0  20010000	addi	r1,r0,#0
  775  000017e4          	L186_LF2:
  776  000017e4  8fa20000	lw	r2,0(r29)
  777  000017e8  8fa30004	lw	r3,4(r29)
  778  000017ec  8fdffff8	lw	r31,-8(r30)
  779  000017f0  001ee820	add	r29,r0,r30
  780  000017f4  8fdefffc	lw	r30,-4(r30)
  781  000017f8  4be00000	jr	r31
  782  000017fc  54000000	nop
  783  00001800          	.endproc _dindex
  784  00001800          	.align 2
  785  00001800          	.proc _ditoa
  786  00001800          	.global _ditoa
  787  00001800          	_ditoa:
  788                      ;  Function 'ditoa'; 0 bytes of locals, 5 regs to save.
  789  00001800  afbefffc	sw	-4(r29),r30; push fp
  790  00001804  001df020	add	r30,r0,r29; fp = sp
  791  00001808  afbffff8	sw	-8(r29),r31; push ret addr
  792  0000180c  2fbd0020	subui	r29,r29,#32; alloc local storage
  793  00001810  afa20000	sw	0(r29),r2
  794  00001814  afa30004	sw	4(r29),r3
  795  00001818  afa40008	sw	8(r29),r4
  796  0000181c  afa5000c	sw	12(r29),r5
  797  00001820  afa60010	sw	16(r29),r6
  798  00001824  8fc30000	lw	r3,(r30)
  799  00001828  8fc40004	lw	r4,4(r30)
  800  0000182c  68610000	slti	r1,r3,#0
  801  00001830  10200010	beqz	r1,L203_LF2
  802  00001834  54000000	nop; not filled.
  803  00001838  2006002d	addi	r6,r0,(#0x2d)&0xff
  804  0000183c  08000014	j	L216_LF2
  805  00001840  54000000	nop; not filled.
  806  00001844          	L203_LF2:
  807  00001844  64610000	snei	r1,r3,#0
  808  00001848  14200018	bnez	r1,L205_LF2
  809  0000184c  54000000	nop; not filled.
  810  00001850  20060030	addi	r6,r0,(#0x30)&0xff
  811  00001854          	L216_LF2:
  812  00001854  a0860000	sb	(r4),r6
  813  00001858  20840001	addi	r4,r4,#1
  814  0000185c  0800007c	j	L204_LF2
  815  00001860  54000000	nop; not filled.
  816  00001864          	L205_LF2:
  817  00001864  201f0001	addi	r31,r0,#1
  818  00001868  03e3082c	sle	r1,r31,r3
  819  0000186c  1020001c	beqz	r1,L208_LF2
  820  00001870  54000000	nop; not filled.
  821  00001874          	L209_LF2:
  822  00001874  53e10002	slli	r1,r31,#0x2
  823  00001878  003f0820	add	r1,r1,r31
  824  0000187c  503f0001	slli	r31,r1,#0x1
  825  00001880  03e3082c	sle	r1,r31,r3
  826  00001884  1420ffec	bnez	r1,L209_LF2
  827  00001888  54000000	nop; not filled.
  828  0000188c          	L208_LF2:
  829  0000188c  2005000a	addi	r5,r0,#10
  830  00001890          	L212_LF2:
  831  00001890  03e00035	movi2fp	f0,r31
  832  00001894  00a00835	movi2fp	f1,r5
  833  00001898  0401000f	div	f0,f0,f1
  834  0000189c  0000f834	movfp2i	r31,f0
  835  000018a0  00600035	movi2fp	f0,r3
  836  000018a4  03e00835	movi2fp	f1,r31
  837  000018a8  0401000f	div	f0,f0,f1
  838  000018ac  00001034	movfp2i	r2,f0
  839  000018b0  20410030	addi	r1,r2,#48
  840  000018b4  a0810000	sb	(r4),r1
  841  000018b8  20840001	addi	r4,r4,#1
  842  000018bc  00400035	movi2fp	f0,r2
  843  000018c0  03e00835	movi2fp	f1,r31
  844  000018c4  0401000e	mult	f0,f0,f1
  845  000018c8  00000834	movfp2i	r1,f0
  846  000018cc  00611822	sub	r3,r3,r1
  847  000018d0  6fe10001	sgti	r1,r31,#1
  848  000018d4  1420ffb8	bnez	r1,L212_LF2
  849  000018d8  54000000	nop; not filled.
  850  000018dc          	L204_LF2:
  851  000018dc  20060000	addi	r6,r0,(#0x0)&0xff
  852  000018e0  a0860000	sb	(r4),r6
  853  000018e4  8fa20000	lw	r2,0(r29)
  854  000018e8  8fa30004	lw	r3,4(r29)
  855  000018ec  8fa40008	lw	r4,8(r29)
  856  000018f0  8fa5000c	lw	r5,12(r29)
  857  000018f4  8fa60010	lw	r6,16(r29)
  858  000018f8  8fdffff8	lw	r31,-8(r30)
  859  000018fc  001ee820	add	r29,r0,r30
  860  00001900  8fdefffc	lw	r30,-4(r30)
  861  00001904  4be00000	jr	r31
  862  00001908  54000000	nop
  863  0000190c          	.endproc _ditoa
  864  0000190c          	.align 2
  865  0000190c          	.proc _dstrtol
  866  0000190c          	.global _dstrtol
  867  0000190c          	_dstrtol:
  868                      ;  Function 'dstrtol'; 0 bytes of locals, 5 regs to save.
  869  0000190c  afbefffc	sw	-4(r29),r30; push fp
  870  00001910  001df020	add	r30,r0,r29; fp = sp
  871  00001914  afbffff8	sw	-8(r29),r31; push ret addr
  872  00001918  2fbd0020	subui	r29,r29,#32; alloc local storage
  873  0000191c  afa20000	sw	0(r29),r2
  874  00001920  afa30004	sw	4(r29),r3
  875  00001924  afa40008	sw	8(r29),r4
  876  00001928  afa5000c	sw	12(r29),r5
  877  0000192c  afa60010	sw	16(r29),r6
  878  00001930  8fc20000	lw	r2,(r30)
  879  00001934  8fc50004	lw	r5,4(r30)
  880  00001938  8fc40008	lw	r4,8(r30)
  881  0000193c  20030000	addi	r3,r0,#0
  882  00001940  08000008	j	L247_LF2
  883  00001944  54000000	nop; not filled.
  884  00001948          	L220_LF2:
  885  00001948  20420001	addi	r2,r2,#1
  886  0000194c          	L247_LF2:
  887  0000194c  805f0000	lb	r31,(r2)
  888  00001950  33e100ff	andi	r1,r31,#0x00ff
  889  00001954  60210020	seqi	r1,r1,#32
  890  00001958  1420ffec	bnez	r1,L220_LF2
  891  0000195c  54000000	nop; not filled.
  892  00001960  23e1fff7	addi	r1,r31,#-9
  893  00001964  302100ff	andi	r1,r1,#0x00ff
  894  00001968  70210001	sleui	r1,r1,#1
  895  0000196c  1420ffd8	bnez	r1,L220_LF2
  896  00001970  54000000	nop; not filled.
  897  00001974  64a10000	snei	r1,r5,#0
  898  00001978  10200008	beqz	r1,L222_LF2
  899  0000197c  54000000	nop; not filled.
  900  00001980  aca20000	sw	(r5),r2
  901  00001984          	L222_LF2:
  902  00001984  905f0000	lbu	r31,(r2)
  903  00001988  67e10000	snei	r1,r31,#0
  904  0000198c  10200090	beqz	r1,L248_LF2
  905  00001990  54000000	nop; not filled.
  906  00001994  63e1002d	seqi	r1,r31,#45
  907  00001998  10200014	beqz	r1,L224_LF2
  908  0000199c  54000000	nop; not filled.
  909  000019a0  2006ffff	addi	r6,r0,#-1
  910  000019a4  20420001	addi	r2,r2,#1
  911  000019a8  08000008	j	L225_LF2
  912  000019ac  54000000	nop; not filled.
  913  000019b0          	L224_LF2:
  914  000019b0  20060001	addi	r6,r0,#1
  915  000019b4          	L225_LF2:
  916  000019b4  64810000	snei	r1,r4,#0
  917  000019b8  14200054	bnez	r1,L226_LF2
  918  000019bc  54000000	nop; not filled.
  919  000019c0  90410000	lbu	r1,(r2)
  920  000019c4  60210030	seqi	r1,r1,#48
  921  000019c8  10200040	beqz	r1,L227_LF2
  922  000019cc  54000000	nop; not filled.
  923  000019d0  20420001	addi	r2,r2,#1
  924  000019d4  905f0000	lbu	r31,(r2)
  925  000019d8  63e10078	seqi	r1,r31,#120
  926  000019dc  14200010	bnez	r1,L229_LF2
  927  000019e0  54000000	nop; not filled.
  928  000019e4  63e10058	seqi	r1,r31,#88
  929  000019e8  10200014	beqz	r1,L228_LF2
  930  000019ec  54000000	nop; not filled.
  931  000019f0          	L229_LF2:
  932  000019f0  20040010	addi	r4,r0,#16
  933  000019f4  20420001	addi	r2,r2,#1
  934  000019f8  08000014	j	L226_LF2
  935  000019fc  54000000	nop; not filled.
  936  00001a00          	L228_LF2:
  937  00001a00  20040008	addi	r4,r0,#8
  938  00001a04  08000008	j	L226_LF2
  939  00001a08  54000000	nop; not filled.
  940  00001a0c          	L227_LF2:
  941  00001a0c  2004000a	addi	r4,r0,#10
  942  00001a10          	L226_LF2:
  943  00001a10  2081ffff	addi	r1,r4,#-1
  944  00001a14  6c21000f	sgtui	r1,r1,#15
  945  00001a18  10200010	beqz	r1,L233_LF2
  946  00001a1c  54000000	nop; not filled.
  947  00001a20          	L248_LF2:
  948  00001a20  00030820	add	r1,r0,r3
  949  00001a24  080000c4	j	L245_LF2
  950  00001a28  54000000	nop; not filled.
  951  00001a2c          	L233_LF2:
  952  00001a2c  805f0000	lb	r31,(r2)
  953  00001a30  23e1ffd0	addi	r1,r31,#-48
  954  00001a34  302100ff	andi	r1,r1,#0x00ff
  955  00001a38  70210009	sleui	r1,r1,#9
  956  00001a3c  10200014	beqz	r1,L236_LF2
  957  00001a40  54000000	nop; not filled.
  958  00001a44  33e100ff	andi	r1,r31,#0x00ff
  959  00001a48  2021ffd0	addi	r1,r1,#-48
  960  00001a4c  08000050	j	L237_LF2
  961  00001a50  54000000	nop; not filled.
  962  00001a54          	L236_LF2:
  963  00001a54  23e1ff9f	addi	r1,r31,#-97
  964  00001a58  302100ff	andi	r1,r1,#0x00ff
  965  00001a5c  70210019	sleui	r1,r1,#25
  966  00001a60  10200014	beqz	r1,L238_LF2
  967  00001a64  54000000	nop; not filled.
  968  00001a68  33e100ff	andi	r1,r31,#0x00ff
  969  00001a6c  2021ffa9	addi	r1,r1,#-87
  970  00001a70  0800002c	j	L237_LF2
  971  00001a74  54000000	nop; not filled.
  972  00001a78          	L238_LF2:
  973  00001a78  23e1ffbf	addi	r1,r31,#-65
  974  00001a7c  302100ff	andi	r1,r1,#0x00ff
  975  00001a80  70210019	sleui	r1,r1,#25
  976  00001a84  10200014	beqz	r1,L240_LF2
  977  00001a88  54000000	nop; not filled.
  978  00001a8c  33e100ff	andi	r1,r31,#0x00ff
  979  00001a90  2021ffc9	addi	r1,r1,#-55
  980  00001a94  08000008	j	L237_LF2
  981  00001a98  54000000	nop; not filled.
  982  00001a9c          	L240_LF2:
  983  00001a9c  200103e8	addi	r1,r0,#1000
  984  00001aa0          	L237_LF2:
  985  00001aa0  0024f82a	slt	r31,r1,r4
  986  00001aa4  13e00024	beqz	r31,L246_LF2
  987  00001aa8  54000000	nop; not filled.
  988  00001aac  00600035	movi2fp	f0,r3
  989  00001ab0  00800835	movi2fp	f1,r4
  990  00001ab4  0401000e	mult	f0,f0,f1
  991  00001ab8  00001834	movfp2i	r3,f0
  992  00001abc  00611820	add	r3,r3,r1
  993  00001ac0  20420001	addi	r2,r2,#1
  994  00001ac4  17e0ff64	bnez	r31,L233_LF2
  995  00001ac8  54000000	nop; not filled.
  996  00001acc          	L246_LF2:
  997  00001acc  64a10000	snei	r1,r5,#0
  998  00001ad0  10200008	beqz	r1,L244_LF2
  999  00001ad4  54000000	nop; not filled.
 1000  00001ad8  aca20000	sw	(r5),r2
 1001  00001adc          	L244_LF2:
 1002  00001adc  00600035	movi2fp	f0,r3
 1003  00001ae0  00c00835	movi2fp	f1,r6
 1004  00001ae4  0401000e	mult	f0,f0,f1
 1005  00001ae8  00000834	movfp2i	r1,f0
 1006  00001aec          	L245_LF2:
 1007  00001aec  8fa20000	lw	r2,0(r29)
 1008  00001af0  8fa30004	lw	r3,4(r29)
 1009  00001af4  8fa40008	lw	r4,8(r29)
 1010  00001af8  8fa5000c	lw	r5,12(r29)
 1011  00001afc  8fa60010	lw	r6,16(r29)
 1012  00001b00  8fdffff8	lw	r31,-8(r30)
 1013  00001b04  001ee820	add	r29,r0,r30
 1014  00001b08  8fdefffc	lw	r30,-4(r30)
 1015  00001b0c  4be00000	jr	r31
 1016  00001b10  54000000	nop
 1017  00001b14          	.endproc _dstrtol
 1018  00001b14          	.align 2
 1019  00001b14          	.proc _bcopy
 1020  00001b14          	.global _bcopy
 1021  00001b14          	_bcopy:
 1022                      ;  Function 'bcopy'; 0 bytes of locals, 3 regs to save.
 1023  00001b14  afbefffc	sw	-4(r29),r30; push fp
 1024  00001b18  001df020	add	r30,r0,r29; fp = sp
 1025  00001b1c  afbffff8	sw	-8(r29),r31; push ret addr
 1026  00001b20  2fbd0018	subui	r29,r29,#24; alloc local storage
 1027  00001b24  afa20000	sw	0(r29),r2
 1028  00001b28  afa30004	sw	4(r29),r3
 1029  00001b2c  afa40008	sw	8(r29),r4
 1030  00001b30  8fc30000	lw	r3,(r30)
 1031  00001b34  8fc20004	lw	r2,4(r30)
 1032  00001b38  8fdf0008	lw	r31,8(r30)
 1033  00001b3c  08000014	j	L259_LF2
 1034  00001b40  54000000	nop; not filled.
 1035  00001b44          	L257_LF2:
 1036  00001b44  80640000	lb	r4,(r3)
 1037  00001b48  a0440000	sb	(r2),r4
 1038  00001b4c  20630001	addi	r3,r3,#1
 1039  00001b50  20420001	addi	r2,r2,#1
 1040  00001b54          	L259_LF2:
 1041  00001b54  001f0820	add	r1,r0,r31
 1042  00001b58  23ffffff	addi	r31,r31,#-1
 1043  00001b5c  6c210000	sgti	r1,r1,#0
 1044  00001b60  1420ffe0	bnez	r1,L257_LF2
 1045  00001b64  54000000	nop; not filled.
 1046  00001b68  8fa20000	lw	r2,0(r29)
 1047  00001b6c  8fa30004	lw	r3,4(r29)
 1048  00001b70  8fa40008	lw	r4,8(r29)
 1049  00001b74  8fdffff8	lw	r31,-8(r30)
 1050  00001b78  001ee820	add	r29,r0,r30
 1051  00001b7c  8fdefffc	lw	r30,-4(r30)
 1052  00001b80  4be00000	jr	r31
 1053  00001b84  54000000	nop
 1054  00001b88          	.endproc _bcopy
 1055  00001b88          	.align 2
 1056  00001b88          	.proc _bzero
 1057  00001b88          	.global _bzero
 1058  00001b88          	_bzero:
 1059                      ;  Function 'bzero'; 0 bytes of locals, 2 regs to save.
 1060  00001b88  afbefffc	sw	-4(r29),r30; push fp
 1061  00001b8c  001df020	add	r30,r0,r29; fp = sp
 1062  00001b90  afbffff8	sw	-8(r29),r31; push ret addr
 1063  00001b94  2fbd0010	subui	r29,r29,#16; alloc local storage
 1064  00001b98  afa20000	sw	0(r29),r2
 1065  00001b9c  afa30004	sw	4(r29),r3
 1066  00001ba0  8fc20000	lw	r2,(r30)
 1067  00001ba4  8fdf0004	lw	r31,4(r30)
 1068  00001ba8  08000010	j	L270_LF2
 1069  00001bac  54000000	nop; not filled.
 1070  00001bb0          	L268_LF2:
 1071  00001bb0  20030000	addi	r3,r0,(#0x0)&0xff
 1072  00001bb4  a0430000	sb	(r2),r3
 1073  00001bb8  20420001	addi	r2,r2,#1
 1074  00001bbc          	L270_LF2:
 1075  00001bbc  001f0820	add	r1,r0,r31
 1076  00001bc0  23ffffff	addi	r31,r31,#-1
 1077  00001bc4  6c210000	sgti	r1,r1,#0
 1078  00001bc8  1420ffe4	bnez	r1,L268_LF2
 1079  00001bcc  54000000	nop; not filled.
 1080  00001bd0  8fa20000	lw	r2,0(r29)
 1081  00001bd4  8fa30004	lw	r3,4(r29)
 1082  00001bd8  8fdffff8	lw	r31,-8(r30)
 1083  00001bdc  001ee820	add	r29,r0,r30
 1084  00001be0  8fdefffc	lw	r30,-4(r30)
 1085  00001be4  4be00000	jr	r31
 1086  00001be8  54000000	nop
 1087  00001bec          	.endproc _bzero
 1088                      ;;; Ethan L. Miller, 1999.  Released to the public domain
 1089                      ;;;
 1090                      ;;; Most of the traps are called in files from libtraps.
 1093  00001bec          	.align 2
 1094  00001bec          	.proc _exit
 1095  00001bec          	.global _exit
 1096  00001bec          	_exit:
 1097  00001bec  44000300	trap	#0x300
 1098  00001bf0  4be00000	jr	r31
 1099  00001bf4  54000000	nop
 1100  00001bf8          	.endproc _exit
 1102                      ; for the benefit of gcc.
 1103  00001bf8          	.proc ___main
 1104  00001bf8          	.global ___main
 1105  00001bf8          	___main:
 1106  00001bf8  4be00000	jr	r31
 1107  00001bfc  54000000	nop
 1108  00001c00          	.endproc ___main
 1109  00001c00          	.text
 1110  00001c00          	.global _etext
 1111  00001c00          	_etext:
 1112  00001c00          	.align 3
 1113  00001c00          	.data
 1114  00002013          	.global _edata
 1115  00002013          	_edata:
